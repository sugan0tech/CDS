1 Define ADT
    Abstract Data Type is a type of object which has set of values and operation.
    It's about how these operation performed.

2 Diff btw Lnnear datastructure / Non linear data structure
    ________________________________________________________________________________
    |  Linear data structure                       Non linear data structure       |
    |------------------------------------------------------------------------------|
    |  The elements of this data                   Here the elements are arrnaged  |
    |  structure is arranged sequentially          non linear manner.              |
    |  or linearly.                                                                |
    |------------------------------------------------------------------------------|
    |  We can traverse to all the elements         We can't traverse all the       |
    |  in a single run.                            elements in single run.         |
    |------------------------------------------------------------------------------|
    |  It can be easily implement in a             Not eay to implement in system  |
    |  computer memory, which is arranged in       system memory.                  |
    |  linear manner.                                                              |
    |------------------------------------------------------------------------------|

3 Different way for the implementation of List ADT. 
    -> Singly Linked List 
    -> Doubly Linked List 
    -> Circular Linked List

4 Advantages of Linked List over array.
    In Linked List the list operations like insertion, appending and deletion can be 
    made easily. For array for each operation we have to reassing the array. 

    Size of array is fixed but for Linked List the size varies dynamically depending on the 
    us input. 

5 Singly linked List vs Doubly Linked List.
    ________________________________________________________________________________
    |  Singly Linked List                            Doubly Linked List            |
    |------------------------------------------------------------------------------|
    |  stores addres of the next node              Stores addresss of the next node|
    |                                              previous node.                  |
    |------------------------------------------------------------------------------|
    |  We can traverse to all the elements         We can traverse to all the      |
    |  using next node.                            elements using next and         |         
    |                                              previous node.                  |
    |------------------------------------------------------------------------------|
    |  it occupies less amount of memory.          It occupies more amount of      |
    |                                              system memory.                  |
    |------------------------------------------------------------------------------|
    |  Less efficiency in accessing elements.      high efficiency in accessing    |
    |                                              elements.                       |
    |------------------------------------------------------------------------------|





